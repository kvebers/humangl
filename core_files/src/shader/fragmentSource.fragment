#version 330 core

out vec4 FragColor;

in vec2 TexCoord;
in vec3 FragNormal;
in vec3 FragPos;

uniform sampler2D texture1;
uniform int useTexture;
uniform int useLight;
uniform vec3 objectColor;

uniform float Ns;
uniform vec3 Ka;
uniform vec3 Kd;
uniform vec3 Ks;
uniform float Ni;
uniform float d;
uniform int illum;
uniform vec3 LightPos;

void main() {

    vec4 texColor = texture(texture1, TexCoord);

	vec3 lighting;
	vec3 lightColor = vec3(1.0, 1.0, 1.0);

	vec3 lightDir = normalize(LightPos - FragPos);
	float diffuseStrength = max(0.0, dot(LightPos, -lightDir));
	vec3 diffuse = diffuseStrength * Kd;

	vec3 ambient = Ka;
	float strength = 0.2;
	float transparency = d;

    vec3 finalColor;
	if (useTexture == 1) {
		finalColor = texColor.rgb;
	} else if (useTexture == 2) {
		lighting = ambient * strength + diffuse;
		finalColor = objectColor * lighting;
	} else if (useTexture == 3) {
		lighting = ambient * strength + diffuse;
		finalColor = texColor.rgb * lighting;
	} else if (useTexture == 4) {
		vec3 mixedColor = mix(texColor.rgb, objectColor, 0.15);
		finalColor = mixedColor;
	} else {
		finalColor = objectColor;
	}
	finalColor *= transparency;
    FragColor = vec4(finalColor, texColor.a);
}
