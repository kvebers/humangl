#version 330 core

layout (location = 0) in vec3 aPos;
layout (location = 1) in vec2 aTexCoord;
layout (location = 2) in vec3 aNormal;

out vec2 TexCoord;
out vec3 FragNormal;
flat out vec3 FragPos; // Use flat interpolation for the vertex position

uniform mat4 model;
uniform mat4 view;
uniform mat4 projection;
uniform mat4 modelViewProjectionMatrix;

void main() {
    vec4 clipPos = modelViewProjectionMatrix * vec4(aPos, 1.0);

    // Calculate fragment position in world space
    FragPos = clipPos.xyz / clipPos.w;

    // Calculate normal in world space
    FragNormal = mat3(transpose(inverse(mat3(modelViewProjectionMatrix)))) * aNormal;

    // Pass clip space position
    gl_Position = clipPos;

    // Pass texture coordinates to fragment shader
    TexCoord = vec2(aTexCoord.x, aTexCoord.y);
}
